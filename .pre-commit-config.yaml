repos:
  # Ruff for linting and formatting
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.6
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix, --config=backend/pyproject.toml]
        name: Ruff linter
        files: ^backend/.*\.py$
      - id: ruff-format
        args: [--config=backend/pyproject.toml]
        name: Ruff formatter
        files: ^backend/.*\.py$

  # Custom hooks for coding standards
  - repo: local
    hooks:
      # Check for TODO/FIXME markers
      - id: no-todo-fixme
        name: No TODO/FIXME markers
        entry: bash -c 'if grep -r "TODO\|FIXME\|HACK\|XXX" --include="*.py" backend/; then echo "❌ Found TODO/FIXME markers - these are prohibited!"; exit 1; fi'
        language: system
        files: ^backend/.*\.py$
        
      # Check for deprecated datetime methods
      - id: no-deprecated-datetime
        name: No deprecated datetime methods
        entry: bash -c 'if grep -r "datetime\.utcnow()\|datetime\.utcfromtimestamp(" --include="*.py" backend/; then echo "❌ Found deprecated datetime methods - use datetime.datetime.now(datetime.timezone.utc) instead!"; exit 1; fi'
        language: system
        files: ^backend/.*\.py$
        
      # Check for deprecated collections imports
      - id: no-deprecated-collections
        name: No deprecated collections imports
        entry: bash -c 'if grep -r "from collections import.*\(Mapping\|Sequence\)" --include="*.py" backend/; then echo "❌ Found deprecated collections imports - use collections.abc instead!"; exit 1; fi'
        language: system
        files: ^backend/.*\.py$
        
      # Check for empty function implementations (except interfaces)
      - id: no-empty-functions
        name: No empty function implementations
        entry: bash -c 'if grep -r "def.*:\s*pass" --include="*.py" backend/ | grep -v "class.*Interface\|@abc.abstractmethod"; then echo "❌ Found empty function implementations - complete implementation required!"; exit 1; fi'
        language: system
        files: ^backend/.*\.py$
        
      # Check for hardcoded business data
      - id: no-hardcoded-data
        name: No hardcoded business data
        entry: bash -c 'if grep -r "return \[.*{.*\".*\".*:.*\".*\".*}.*\]" --include="*.py" backend/ | grep -v test; then echo "❌ Found hardcoded business data - use Repository pattern with monk/ directory!"; exit 1; fi'
        language: system
        files: ^backend/.*\.py$

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        args: [--config-file=backend/pyproject.toml]
        files: ^backend/.*\.py$
        
  # Security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-c, backend/pyproject.toml]
        files: ^backend/.*\.py$
        
  # Frontend linting and formatting
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.56.0
    hooks:
      - id: eslint
        files: ^frontend/src/.*\.(ts|tsx|js|jsx)$
        additional_dependencies:
          - eslint@^8.56.0
          - "@typescript-eslint/eslint-plugin@^6.0.0"
          - "@typescript-eslint/parser@^6.0.0"
          - eslint-plugin-react@^7.33.0
          - eslint-plugin-react-hooks@^4.6.0
        args: [--fix]

  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        files: ^frontend/src/.*\.(ts|tsx|js|jsx|css|scss|json|md)$
        args: [--write]

  # Frontend TypeScript type checking
  - repo: local
    hooks:
      - id: frontend-type-check
        name: Frontend TypeScript type check
        entry: bash -c 'cd frontend && npm run type-check'
        language: system
        files: ^frontend/src/.*\.(ts|tsx)$
        pass_filenames: false

      # Frontend custom checks
      - id: no-console-log
        name: No console.log in frontend
        entry: bash -c 'if grep -r "console\.log\|console\.warn\|console\.error" --include="*.ts" --include="*.tsx" frontend/src/ | grep -v "// eslint-disable-next-line"; then echo "❌ Found console statements in frontend - use proper logging!"; exit 1; fi'
        language: system
        files: ^frontend/src/.*\.(ts|tsx)$

      - id: no-hardcoded-urls
        name: No hardcoded URLs in frontend
        entry: bash -c 'if grep -r "http://\|https://" --include="*.ts" --include="*.tsx" frontend/src/ | grep -v "process\.env\|config\|constant"; then echo "❌ Found hardcoded URLs - use environment variables!"; exit 1; fi'
        language: system
        files: ^frontend/src/.*\.(ts|tsx)$

  # Basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=1000'] 